// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ADYPOS
@_exported import ADYPOS
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 17.0, *)
@objc public protocol ADYDeviceManagerDelegate {
  @objc func onDeviceDiscovered(device: ADYPOS.ADYDevice, by manager: any ADYPOS.ADYDeviceManager)
  @objc func onDeviceDiscoveryFailed(with error: any Swift.Error, by manager: any ADYPOS.ADYDeviceManager)
  @objc func onDeviceConnected(with error: (any Swift.Error)?, to manager: any ADYPOS.ADYDeviceManager)
  @objc func onDeviceDisconnected(from manager: any ADYPOS.ADYDeviceManager)
}
@available(iOS 17.0, *)
@objc public protocol ADYDeviceManager {
  @objc var connectedDevice: ADYPOS.ADYConnectedDevice? { get }
  @objc var discoveredDevices: [ADYPOS.ADYDevice] { get }
  @objc var knownDevices: [ADYPOS.ADYDevice] { get }
  @objc var delegate: (any ADYPOS.ADYDeviceManagerDelegate)? { get set }
  @objc func startDiscovery()
  @objc func stopDiscovery()
  @objc func connect(to device: ADYPOS.ADYDevice)
  @objc func disconnect()
}
public typealias ADYReversalResponse = Foundation.Data
@available(iOS 17.0, *)
@objc final public class ADYReversalRequest : ObjectiveC.NSObject {
  @objc final public var data: Foundation.Data {
    @objc get
  }
  @objc public init(data: Foundation.Data) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
@objc @_Concurrency.MainActor(unsafe) final public class ADYDeviceManagementViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public init(paymentService: ADYPOS.ADYPaymentService)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
@objc final public class ADYDevice : ObjectiveC.NSObject {
  @objc public enum ADYDeviceType : Swift.Int {
    case nyc1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public var serialNumber: Swift.String {
    @objc get
  }
  @objc final public var type: ADYPOS.ADYDevice.ADYDeviceType {
    @objc get
  }
  @objc deinit
}
public typealias ADYCardAcquisitionResponse = Foundation.Data
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
@objc final public class ADYCardAcquisitionRequest : ObjectiveC.NSObject {
  @objc final public var data: Foundation.Data {
    @objc get
  }
  @objc public init(data: Foundation.Data) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 17.0, *)
@objcMembers final public class ADYConnectedDevice : ObjectiveC.NSObject {
  @objc final public let uuid: Foundation.UUID
  @objc final public let type: ADYPOS.ADYDevice.ADYDeviceType
  @objc final public let serialNumber: Swift.String
  @objc final public let name: Swift.String?
  @objc final public let model: Swift.String?
  @objc final public let firmwareVersion: Swift.String
  @objc final public let systemVersion: Swift.String
  @objc final public let serialNumberCPU: Swift.String?
  @objc final public let batteryCapacity: Swift.UInt
  @objc final public let isCharging: Swift.Bool
  @objc deinit
}
public typealias ADYDiagnosisResponse = Foundation.Data
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
@objc final public class ADYDiagnosisRequest : ObjectiveC.NSObject {
  @objc final public var data: Foundation.Data {
    @objc get
  }
  @objc public init(data: Foundation.Data) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
@objc final public class ADYTransactionPresentationMode : ObjectiveC.NSObject {
  @objc public static func presentingViewController(_ presentingViewController: UIKit.UIViewController, parameters: ADYPOS.ADYPaymentServiceParameters? = nil) throws -> ADYPOS.ADYTransactionPresentationMode
  @objc public static func presentingViewController(_ presentingViewController: UIKit.UIViewController) throws -> ADYPOS.ADYTransactionPresentationMode
  @objc public static func viewModifier() -> ADYPOS.ADYTransactionPresentationMode
  @objc deinit
}
@available(iOS 17.0, *)
@objc final public class ADYPaymentServiceParameters : ObjectiveC.NSObject {
  final public var successScreenTimeout: Foundation.TimeInterval {
    get
  }
  @objc public init(successScreenTimeout: Foundation.TimeInterval) throws
  @objc deinit
}
public typealias ADYPaymentResponse = Foundation.Data
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
@objc final public class ADYPaymentRequest : ObjectiveC.NSObject {
  @objc final public var data: Foundation.Data {
    @objc get
  }
  @objc public init(data: Foundation.Data) throws
  @objc deinit
}
@available(iOS 17.0, *)
@objc public enum ADYPaymentInterfaceType : Swift.Int {
  case cardReader
  case tapToPay
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
@objc final public class ADYPaymentInterface : ObjectiveC.NSObject {
  @objc final public var type: ADYPOS.ADYPaymentInterfaceType {
    @objc get
  }
  @objc deinit
}
@available(iOS 17.0, *)
@objc public protocol ADYFirmwareManager {
  @objc var firmwareDelegate: (any ADYPOS.ADYFirmwareManagerDelegate)? { get set }
  #if compiler(>=5.3) && $AsyncAwait
  @available(*, renamed: "retrieveFirmwareUpdateSummary")
  @objc func firmwareUpdateAvailable() async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc func startFirmwareUpdate() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc func retrieveFirmwareUpdateSummary() async throws -> ADYPOS.ADYAvailableFirmwareUpdate?
  #endif
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
@objc public class ADYAvailableFirmwareUpdate : ObjectiveC.NSObject {
  @objc public var requiredDate: Foundation.Date?
  @objc public var requiresBluetoothConnection: Swift.Bool
  @objc deinit
}
@available(iOS 17.0, *)
@objc public protocol ADYFirmwareManagerDelegate {
  @objc func firmwareUpdateProgress(percent: Swift.Double)
  @objc func firmwareDownloadProgress(percent: Swift.Double)
  @objc func applyingFirmwareUpdate()
  @objc func firmwareUpdateComplete()
  @objc func firmwareUpdateFailure(error: any Swift.Error)
}
@available(iOS 17.0, *)
@objc public protocol ADYPaymentServiceDelegate {
  @objc func register(with setupToken: Swift.String, completion: @escaping ((Swift.String) -> Swift.Void))
}
@available(iOS 17.0, *)
@objc final public class ADYPaymentService : ObjectiveC.NSObject {
  @objc final public let deviceManager: any ADYPOS.ADYDeviceManager & ADYPOS.ADYFirmwareManager
  @objc public init(delegate: any ADYPOS.ADYPaymentServiceDelegate)
  @objc final public func getInstallationId() throws -> Swift.String
  @objc final public func getSDKVersion() -> Swift.String
  @objc final public func getPaymentInterface(with type: ADYPOS.ADYPaymentInterfaceType, completion: @escaping (ADYPOS.ADYPaymentInterface?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func performTransaction(with transaction: ADYPOS.ADYPaymentRequest, paymentInterface: ADYPOS.ADYPaymentInterface, presentationMode: ADYPOS.ADYTransactionPresentationMode, completion: @escaping (ADYPOS.ADYPaymentResponse) -> Swift.Void)
  @objc final public func performCardAcquisition(with request: ADYPOS.ADYCardAcquisitionRequest, paymentInterface: ADYPOS.ADYPaymentInterface, presentationMode: ADYPOS.ADYTransactionPresentationMode, completion: @escaping (ADYPOS.ADYCardAcquisitionResponse) -> Swift.Void)
  @_Concurrency.MainActor @objc final public func warmUp(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc final public func performReversal(with request: ADYPOS.ADYReversalRequest, completion: @escaping (ADYPOS.ADYReversalResponse) -> Swift.Void)
  @objc final public func performDiagnosis(with request: ADYPOS.ADYDiagnosisRequest, completion: @escaping (ADYPOS.ADYDiagnosisResponse) -> Swift.Void)
  @objc final public func resetSession(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@available(iOS 17.0, *)
extension ADYPOS.ADYDevice.ADYDeviceType : Swift.Equatable {}
@available(iOS 17.0, *)
extension ADYPOS.ADYDevice.ADYDeviceType : Swift.Hashable {}
@available(iOS 17.0, *)
extension ADYPOS.ADYDevice.ADYDeviceType : Swift.RawRepresentable {}
@available(iOS 17.0, *)
extension ADYPOS.ADYPaymentInterfaceType : Swift.Equatable {}
@available(iOS 17.0, *)
extension ADYPOS.ADYPaymentInterfaceType : Swift.Hashable {}
@available(iOS 17.0, *)
extension ADYPOS.ADYPaymentInterfaceType : Swift.RawRepresentable {}
