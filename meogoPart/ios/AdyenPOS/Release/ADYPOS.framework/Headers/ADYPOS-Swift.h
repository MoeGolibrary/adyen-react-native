#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef ADYPOS_SWIFT_H
#define ADYPOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ADYPOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSDate;

SWIFT_CLASS("_TtC6ADYPOS26ADYAvailableFirmwareUpdate") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYAvailableFirmwareUpdate : NSObject
/// The date at which the firmware update will be required, at which point transactions will no longer be possible on this firmware version
@property (nonatomic, copy) NSDate * _Nullable requiredDate;
/// Whether this update requires a Bluetooth connection to the device in order to proceed
@property (nonatomic) BOOL requiresBluetoothConnection;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;

/// Describes the payment transaction
SWIFT_CLASS("_TtC6ADYPOS25ADYCardAcquisitionRequest") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYCardAcquisitionRequest : NSObject
/// Terminal API card acquisition response data
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Initiates card acquisition object with Terminal API card acquisition request data.
/// \param data Terminal API card acquisition request data.
///
///
/// throws:
/// <code>AdyenPOSError/malformedTransactionRequest(parsingError:)</code> if the TAPI request can’t be parsed
///
/// returns:
/// Initiated <code>ADYCardAcquisitionRequest</code> object.
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;
enum ADYDeviceType : NSInteger;
@class NSString;

SWIFT_CLASS("_TtC6ADYPOS18ADYConnectedDevice") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYConnectedDevice : NSObject
/// The UUID of the device
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// The type of the device
@property (nonatomic, readonly) enum ADYDeviceType type;
/// The serialNumber of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// The name of the device
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The model of the device
@property (nonatomic, readonly, copy) NSString * _Nullable model;
/// The firmware version of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull firmwareVersion;
/// The system version of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull systemVersion;
/// The serialNumber of the CPU of the device
@property (nonatomic, readonly, copy) NSString * _Nullable serialNumberCPU;
/// The capacity of the device’s battery, percentage
@property (nonatomic, readonly) NSUInteger batteryCapacity;
/// Indicates whether the device is currently charging
@property (nonatomic, readonly) BOOL isCharging;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A physical device for making payments
SWIFT_CLASS("_TtC6ADYPOS9ADYDevice") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYDevice : NSObject
/// The serial number of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// The type of the device
@property (nonatomic, readonly) enum ADYDeviceType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A type of the physical device
typedef SWIFT_ENUM(NSInteger, ADYDeviceType, open) {
/// Adyen NYC1
  ADYDeviceTypeNyc1 = 0,
};

@class ADYPaymentService;
@class NSCoder;
@class NSBundle;

SWIFT_CLASS("_TtC6ADYPOS33ADYDeviceManagementViewController") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYDeviceManagementViewController : UIViewController
/// Initiaizes an instance of <code>ADYDeviceManagementViewController</code>
/// \param paymentService an instance of <code>ADYPaymentService</code>
///
- (nonnull instancetype)initWithPaymentService:(ADYPaymentService * _Nonnull)paymentService OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol ADYDeviceManagerDelegate;

/// Responsible for connection and communication with physical devices
SWIFT_PROTOCOL("_TtP6ADYPOS16ADYDeviceManager_") SWIFT_AVAILABILITY(ios,introduced=17.0)
@protocol ADYDeviceManager
/// The device that the manager is currently connected to
@property (nonatomic, readonly, strong) ADYConnectedDevice * _Nullable connectedDevice;
/// Devices discovered during the last (ongoing) discovery.
/// Sorted by proximity (RSSI)
@property (nonatomic, readonly, copy) NSArray<ADYDevice *> * _Nonnull discoveredDevices;
/// List of all paired compatible devices
@property (nonatomic, readonly, copy) NSArray<ADYDevice *> * _Nonnull knownDevices;
/// The delegate to handle physical device events
@property (nonatomic, strong) id <ADYDeviceManagerDelegate> _Nullable delegate;
/// Starts the discovery of compatible BTLE devices
- (void)startDiscovery;
/// Stops the discovery of compatible BTLE devices
- (void)stopDiscovery;
/// Attemps to connect to a given device
/// \param device An <code>ADYDevice</code> describing the device to connect to
///
- (void)connectTo:(ADYDevice * _Nonnull)device;
/// Disconnects from the current connected device
- (void)disconnect;
@end


SWIFT_PROTOCOL("_TtP6ADYPOS24ADYDeviceManagerDelegate_") SWIFT_AVAILABILITY(ios,introduced=17.0)
@protocol ADYDeviceManagerDelegate
/// Invoked when a new device is discovered
/// \param device An <code>ADYDevice</code> describing the device discovered
///
/// \param manager An <code>ADYDeviceManager</code> that discovered the device
///
- (void)onDeviceDiscoveredWithDevice:(ADYDevice * _Nonnull)device by:(id <ADYDeviceManager> _Nonnull)manager;
/// Invoked when a device discovery fails
/// \param error An <code>Error</code> describing the failure reason
///
/// \param manager An <code>ADYDeviceManager</code> that failed to discover devices
///
- (void)onDeviceDiscoveryFailedWith:(NSError * _Nonnull)error by:(id <ADYDeviceManager> _Nonnull)manager;
/// Invoked when a device discovery fails
/// \param error An optional <code>Error</code> describing the failure reason
///
/// \param manager An <code>ADYDeviceManager</code> that failed the device connected to
///
- (void)onDeviceConnectedWith:(NSError * _Nullable)error to:(id <ADYDeviceManager> _Nonnull)manager;
/// Invoked when a device is disconnected
/// \param manager An <code>ADYDeviceManager</code> that the device was disconnected from
///
- (void)onDeviceDisconnectedFrom:(id <ADYDeviceManager> _Nonnull)manager;
@end


/// Describes the diagnosis request
SWIFT_CLASS("_TtC6ADYPOS19ADYDiagnosisRequest") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYDiagnosisRequest : NSObject
/// Terminal API diagnosis response data
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Initializes ADYDiagnosisRequest object with Terminal API diagnosis request data.
/// \param data Terminal API diagnosis request data.
///
///
/// throws:
/// <code>AdyenPOSError/malformedTransactionRequest(parsingError:)</code> if the TAPI request can’t be parsed
///
/// returns:
/// Initialized <code>ADYDiagnosisRequest</code> object.
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol ADYFirmwareManagerDelegate;

SWIFT_PROTOCOL("_TtP6ADYPOS18ADYFirmwareManager_") SWIFT_AVAILABILITY(ios,introduced=17.0)
@protocol ADYFirmwareManager
/// The delegate to handle firmware related events
@property (nonatomic, strong) id <ADYFirmwareManagerDelegate> _Nullable firmwareDelegate;
/// Value which indicates whether a firmware update is available or not
- (void)firmwareUpdateAvailableWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Asynchronously starts the firmware update on the connected device.
/// Ensure you have correctly set <code>FirmwareManagerDelegate</code> in order to receive progress related updates,
/// otherwise an error will be thrown when calling this function.
///
/// throws:
/// <code>AdyenPOSError/FirmwareError/bluetoothFirmwareUpdateError</code> if an error occurred updating the Bluetooth firmware on the device.
- (void)startFirmwareUpdateWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Check if there is a firmware update available
///
/// throws:
/// <code>AdyenPOSError/FirmwareError/generalError</code> if a general error occurs fetching/determining the firmware updates.
///
/// returns:
/// an instance of <code>AvailableFirmwareUpdate</code> if there is a firmware update available, nil otherwise
- (void)retrieveFirmwareUpdateSummaryWithCompletionHandler:(void (^ _Nonnull)(ADYAvailableFirmwareUpdate * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_PROTOCOL("_TtP6ADYPOS26ADYFirmwareManagerDelegate_") SWIFT_AVAILABILITY(ios,introduced=17.0)
@protocol ADYFirmwareManagerDelegate
/// Invoked when the firmware update percent increases
- (void)firmwareUpdateProgressWithPercent:(double)percent;
/// Invoked when the firmware download percent increases
- (void)firmwareDownloadProgressWithPercent:(double)percent;
/// Invoked when the firmware update is being applied to the connected device
- (void)applyingFirmwareUpdate;
/// Invoked when the firmware update has been completed
- (void)firmwareUpdateComplete;
/// Invoked when the firmware update fails with an associated error
/// \param error <code>AdyenPOSError/FirmwareError</code> if there was an error performing a firmware update
///
- (void)firmwareUpdateFailureWithError:(NSError * _Nonnull)error;
@end

enum ADYPaymentInterfaceType : NSInteger;

/// Describes the payment interface for a transaction
SWIFT_CLASS("_TtC6ADYPOS19ADYPaymentInterface") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYPaymentInterface : NSObject
/// Type of the payment interface
@property (nonatomic, readonly) enum ADYPaymentInterfaceType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Describes a type type of payment interface
typedef SWIFT_ENUM(NSInteger, ADYPaymentInterfaceType, open) {
/// Real card reader with real backend
  ADYPaymentInterfaceTypeCardReader = 0,
/// Tap to pay on iPhone
  ADYPaymentInterfaceTypeTapToPay = 1,
};


/// Describes the payment transaction
SWIFT_CLASS("_TtC6ADYPOS17ADYPaymentRequest") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYPaymentRequest : NSObject
/// Terminal API payment request data
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Initiates payment transaction object with Terminal API payment request data.
/// \param data Terminal API payment request data.
///
///
/// throws:
/// <code>DecodingError</code> if the <code>MessageHeader</code> can’t be parsed
///
/// returns:
/// Initiated <code>Payment</code> object.
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol ADYPaymentServiceDelegate;
@class ADYTransactionPresentationMode;
@class ADYReversalRequest;

SWIFT_CLASS("_TtC6ADYPOS17ADYPaymentService") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYPaymentService : NSObject
@property (nonatomic, readonly, strong) id <ADYDeviceManager, ADYFirmwareManager> _Nonnull deviceManager;
/// Initialises the <code>ADYPaymentService</code> instance with a given <code>delegate</code>.
/// \param delegate the delegate handles the SDK onboarding.
///
- (nonnull instancetype)initWithDelegate:(id <ADYPaymentServiceDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
/// The unique identifier of this installation.
/// This uniquely identifies the host app installation.
/// It will be re-generated in following cases:
/// <ul>
///   <li>
///     the app is uninstalled.
///   </li>
/// </ul>
- (NSString * _Nullable)getInstallationIdAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// The AdyenPOS SDK version. This value is semantically versioned, and represented as a String e.g. “1.2.3”
- (NSString * _Nonnull)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of <code>ADYPaymentInterface</code> via which the transaction will be performed
/// \param type the type of the payment method
///
/// \param completion A completion handler that will be called with the requrested payment interface or an error.
///
- (void)getPaymentInterfaceWith:(enum ADYPaymentInterfaceType)type completion:(void (^ _Nonnull)(ADYPaymentInterface * _Nullable, NSError * _Nullable))completion;
/// Performs a transaction on a given interface.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     transaction: An instance of <code>ADYPaymentRequest</code> created with Terminal API request.
///   </li>
///   <li>
///     presentationMode: The mode for handling transaction flow UI events.
///   </li>
///   <li>
///     paymentInterface: An instance of <code>ADYPaymentInterface</code> for executing the transaction.
///   </li>
///   <li>
///     completion: A completion handler that will be called once the transaction is completed.
///   </li>
/// </ul>
- (void)performTransactionWith:(ADYPaymentRequest * _Nonnull)transaction paymentInterface:(ADYPaymentInterface * _Nonnull)paymentInterface presentationMode:(ADYTransactionPresentationMode * _Nonnull)presentationMode completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// Performs a transaction on a given interface.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: An instance of <code>ADYCardAcquisitionRequest</code> created with Terminal API request.
///   </li>
///   <li>
///     presentationMode: The mode for handling transaction flow UI events.
///   </li>
///   <li>
///     paymentInterface: An instance of <code>ADYPaymentInterface</code> for executing the transaction.
///   </li>
/// </ul>
/// The result of the transaction, including any errors that may have occurred, is returned as a Terminal API response
///
/// returns:
/// An instance of <code>ADYCardAcquisitionResponse</code> containing Terminal API data.
- (void)performCardAcquisitionWith:(ADYCardAcquisitionRequest * _Nonnull)request paymentInterface:(ADYPaymentInterface * _Nonnull)paymentInterface presentationMode:(ADYTransactionPresentationMode * _Nonnull)presentationMode completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// Performs a warm-up for the PaymentService.
/// This will:
/// <ul>
///   <li>
///     establish a new session if necessary.
///   </li>
///   <li>
///     fetch the configuration if it is expired.
///   </li>
///   <li>
///     prepare the Tap to Pay reader.
///   </li>
/// </ul>
/// \param completion A completion handler that will be called once the warmup is complete
///
- (void)warmUpWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Performs a reversal on a given transaction.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: An instance of <code>ADYReversalRequest</code> created with Terminal API request.
///   </li>
///   <li>
///     completion: A completion handler that will be called once the reversal is completed.
///     The result of the transaction, including any errors that may have occurred, is returned as a Terminal API response
///   </li>
/// </ul>
- (void)performReversalWith:(ADYReversalRequest * _Nonnull)request completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// Performs a diagnosis of the system.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: An instance of <code>ADYDiagnosisRequest</code> created with Terminal API request.
///   </li>
///   <li>
///     completion: A completion handler that will be called once the diagnosis is completed.
///     The result of the diagnosis, including any errors that may have occurred, is returned as a Terminal API response
///   </li>
/// </ul>
- (void)performDiagnosisWith:(ADYDiagnosisRequest * _Nonnull)request completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// Resets the session token
/// \param completion A completion handler that will be called once the session is reset
///
- (void)resetSessionWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6ADYPOS25ADYPaymentServiceDelegate_") SWIFT_AVAILABILITY(ios,introduced=17.0)
@protocol ADYPaymentServiceDelegate
/// Invoked when SDK needs to be onboarded.
/// \param setupToken Token to be passed to <code>/sessions</code>. Read more about <a href="doc:Integration">doc:Integration</a>.
///
/// \param completion A completion handler to be invoked once the <code>sdkData</code> is retrieved.
///
- (void)registerWith:(NSString * _Nonnull)setupToken completion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
@end


SWIFT_CLASS("_TtC6ADYPOS27ADYPaymentServiceParameters") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYPaymentServiceParameters : NSObject
- (nullable instancetype)initWithSuccessScreenTimeout:(NSTimeInterval)successScreenTimeout error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describes the reversal transaction
SWIFT_CLASS("_TtC6ADYPOS18ADYReversalRequest") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYReversalRequest : NSObject
/// Terminal API reversal request data
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Initiates reversal transaction object with Terminal API reversal request data.
/// \param data Terminal API reversal request data.
///
///
/// throws:
///
///
/// returns:
/// Initiated <code>ADYReversalRequest</code> object.
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6ADYPOS30ADYTransactionPresentationMode") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYTransactionPresentationMode : NSObject
/// The UI is handled by the SDK, presented on top of the provided <code>UIViewController</code>
/// \param presentingViewController The merchant application’s ViewController on top of which the SDK will present the transaction flow
///
/// \param parameters Set of configurable parameters allowing customisation of the behaviour of the AdyenPOS SDK
///
///
/// returns:
/// <code>ADYTransactionPresentationMode</code>
+ (ADYTransactionPresentationMode * _Nullable)presentingViewController:(UIViewController * _Nonnull)presentingViewController parameters:(ADYPaymentServiceParameters * _Nullable)parameters error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// The UI is handled by the SDK, presented on top of the provided <code>UIViewController</code>
/// \param presentingViewController The merchant application’s ViewController on top of which the SDK will present the transaction flow
///
///
/// returns:
/// <code>ADYTransactionPresentationMode</code>
+ (ADYTransactionPresentationMode * _Nullable)presentingViewController:(UIViewController * _Nonnull)presentingViewController error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// The UI is handled by the SDK embedded in a <code>View</code> as a <code>ViewModifier</code>
///
/// returns:
/// <code>ADYTransactionPresentationMode</code>
+ (ADYTransactionPresentationMode * _Nonnull)viewModifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef ADYPOS_SWIFT_H
#define ADYPOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ADYPOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSDate;

SWIFT_CLASS("_TtC6ADYPOS26ADYAvailableFirmwareUpdate") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYAvailableFirmwareUpdate : NSObject
/// The date at which the firmware update will be required, at which point transactions will no longer be possible on this firmware version
@property (nonatomic, copy) NSDate * _Nullable requiredDate;
/// Whether this update requires a Bluetooth connection to the device in order to proceed
@property (nonatomic) BOOL requiresBluetoothConnection;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;

/// Describes the payment transaction
SWIFT_CLASS("_TtC6ADYPOS25ADYCardAcquisitionRequest") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYCardAcquisitionRequest : NSObject
/// Terminal API card acquisition response data
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Initiates card acquisition object with Terminal API card acquisition request data.
/// \param data Terminal API card acquisition request data.
///
///
/// throws:
/// <code>AdyenPOSError/malformedTransactionRequest(parsingError:)</code> if the TAPI request can’t be parsed
///
/// returns:
/// Initiated <code>ADYCardAcquisitionRequest</code> object.
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;
enum ADYDeviceType : NSInteger;
@class NSString;

SWIFT_CLASS("_TtC6ADYPOS18ADYConnectedDevice") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYConnectedDevice : NSObject
/// The UUID of the device
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
/// The type of the device
@property (nonatomic, readonly) enum ADYDeviceType type;
/// The serialNumber of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// The name of the device
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The model of the device
@property (nonatomic, readonly, copy) NSString * _Nullable model;
/// The firmware version of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull firmwareVersion;
/// The system version of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull systemVersion;
/// The serialNumber of the CPU of the device
@property (nonatomic, readonly, copy) NSString * _Nullable serialNumberCPU;
/// The capacity of the device’s battery, percentage
@property (nonatomic, readonly) NSUInteger batteryCapacity;
/// Indicates whether the device is currently charging
@property (nonatomic, readonly) BOOL isCharging;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A physical device for making payments
SWIFT_CLASS("_TtC6ADYPOS9ADYDevice") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYDevice : NSObject
/// The serial number of the device
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// The type of the device
@property (nonatomic, readonly) enum ADYDeviceType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A type of the physical device
typedef SWIFT_ENUM(NSInteger, ADYDeviceType, open) {
/// Adyen NYC1
  ADYDeviceTypeNyc1 = 0,
};

@class ADYPaymentService;
@class NSCoder;
@class NSBundle;

SWIFT_CLASS("_TtC6ADYPOS33ADYDeviceManagementViewController") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYDeviceManagementViewController : UIViewController
/// Initiaizes an instance of <code>ADYDeviceManagementViewController</code>
/// \param paymentService an instance of <code>ADYPaymentService</code>
///
- (nonnull instancetype)initWithPaymentService:(ADYPaymentService * _Nonnull)paymentService OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol ADYDeviceManagerDelegate;

/// Responsible for connection and communication with physical devices
SWIFT_PROTOCOL("_TtP6ADYPOS16ADYDeviceManager_") SWIFT_AVAILABILITY(ios,introduced=17.0)
@protocol ADYDeviceManager
/// The device that the manager is currently connected to
@property (nonatomic, readonly, strong) ADYConnectedDevice * _Nullable connectedDevice;
/// Devices discovered during the last (ongoing) discovery.
/// Sorted by proximity (RSSI)
@property (nonatomic, readonly, copy) NSArray<ADYDevice *> * _Nonnull discoveredDevices;
/// List of all paired compatible devices
@property (nonatomic, readonly, copy) NSArray<ADYDevice *> * _Nonnull knownDevices;
/// The delegate to handle physical device events
@property (nonatomic, strong) id <ADYDeviceManagerDelegate> _Nullable delegate;
/// Starts the discovery of compatible BTLE devices
- (void)startDiscovery;
/// Stops the discovery of compatible BTLE devices
- (void)stopDiscovery;
/// Attemps to connect to a given device
/// \param device An <code>ADYDevice</code> describing the device to connect to
///
- (void)connectTo:(ADYDevice * _Nonnull)device;
/// Disconnects from the current connected device
- (void)disconnect;
@end


SWIFT_PROTOCOL("_TtP6ADYPOS24ADYDeviceManagerDelegate_") SWIFT_AVAILABILITY(ios,introduced=17.0)
@protocol ADYDeviceManagerDelegate
/// Invoked when a new device is discovered
/// \param device An <code>ADYDevice</code> describing the device discovered
///
/// \param manager An <code>ADYDeviceManager</code> that discovered the device
///
- (void)onDeviceDiscoveredWithDevice:(ADYDevice * _Nonnull)device by:(id <ADYDeviceManager> _Nonnull)manager;
/// Invoked when a device discovery fails
/// \param error An <code>Error</code> describing the failure reason
///
/// \param manager An <code>ADYDeviceManager</code> that failed to discover devices
///
- (void)onDeviceDiscoveryFailedWith:(NSError * _Nonnull)error by:(id <ADYDeviceManager> _Nonnull)manager;
/// Invoked when a device discovery fails
/// \param error An optional <code>Error</code> describing the failure reason
///
/// \param manager An <code>ADYDeviceManager</code> that failed the device connected to
///
- (void)onDeviceConnectedWith:(NSError * _Nullable)error to:(id <ADYDeviceManager> _Nonnull)manager;
/// Invoked when a device is disconnected
/// \param manager An <code>ADYDeviceManager</code> that the device was disconnected from
///
- (void)onDeviceDisconnectedFrom:(id <ADYDeviceManager> _Nonnull)manager;
@end


/// Describes the diagnosis request
SWIFT_CLASS("_TtC6ADYPOS19ADYDiagnosisRequest") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYDiagnosisRequest : NSObject
/// Terminal API diagnosis response data
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Initializes ADYDiagnosisRequest object with Terminal API diagnosis request data.
/// \param data Terminal API diagnosis request data.
///
///
/// throws:
/// <code>AdyenPOSError/malformedTransactionRequest(parsingError:)</code> if the TAPI request can’t be parsed
///
/// returns:
/// Initialized <code>ADYDiagnosisRequest</code> object.
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol ADYFirmwareManagerDelegate;

SWIFT_PROTOCOL("_TtP6ADYPOS18ADYFirmwareManager_") SWIFT_AVAILABILITY(ios,introduced=17.0)
@protocol ADYFirmwareManager
/// The delegate to handle firmware related events
@property (nonatomic, strong) id <ADYFirmwareManagerDelegate> _Nullable firmwareDelegate;
/// Value which indicates whether a firmware update is available or not
- (void)firmwareUpdateAvailableWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Asynchronously starts the firmware update on the connected device.
/// Ensure you have correctly set <code>FirmwareManagerDelegate</code> in order to receive progress related updates,
/// otherwise an error will be thrown when calling this function.
///
/// throws:
/// <code>AdyenPOSError/FirmwareError/bluetoothFirmwareUpdateError</code> if an error occurred updating the Bluetooth firmware on the device.
- (void)startFirmwareUpdateWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Check if there is a firmware update available
///
/// throws:
/// <code>AdyenPOSError/FirmwareError/generalError</code> if a general error occurs fetching/determining the firmware updates.
///
/// returns:
/// an instance of <code>AvailableFirmwareUpdate</code> if there is a firmware update available, nil otherwise
- (void)retrieveFirmwareUpdateSummaryWithCompletionHandler:(void (^ _Nonnull)(ADYAvailableFirmwareUpdate * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_PROTOCOL("_TtP6ADYPOS26ADYFirmwareManagerDelegate_") SWIFT_AVAILABILITY(ios,introduced=17.0)
@protocol ADYFirmwareManagerDelegate
/// Invoked when the firmware update percent increases
- (void)firmwareUpdateProgressWithPercent:(double)percent;
/// Invoked when the firmware download percent increases
- (void)firmwareDownloadProgressWithPercent:(double)percent;
/// Invoked when the firmware update is being applied to the connected device
- (void)applyingFirmwareUpdate;
/// Invoked when the firmware update has been completed
- (void)firmwareUpdateComplete;
/// Invoked when the firmware update fails with an associated error
/// \param error <code>AdyenPOSError/FirmwareError</code> if there was an error performing a firmware update
///
- (void)firmwareUpdateFailureWithError:(NSError * _Nonnull)error;
@end

enum ADYPaymentInterfaceType : NSInteger;

/// Describes the payment interface for a transaction
SWIFT_CLASS("_TtC6ADYPOS19ADYPaymentInterface") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYPaymentInterface : NSObject
/// Type of the payment interface
@property (nonatomic, readonly) enum ADYPaymentInterfaceType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Describes a type type of payment interface
typedef SWIFT_ENUM(NSInteger, ADYPaymentInterfaceType, open) {
/// Real card reader with real backend
  ADYPaymentInterfaceTypeCardReader = 0,
/// Tap to pay on iPhone
  ADYPaymentInterfaceTypeTapToPay = 1,
};


/// Describes the payment transaction
SWIFT_CLASS("_TtC6ADYPOS17ADYPaymentRequest") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYPaymentRequest : NSObject
/// Terminal API payment request data
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Initiates payment transaction object with Terminal API payment request data.
/// \param data Terminal API payment request data.
///
///
/// throws:
/// <code>DecodingError</code> if the <code>MessageHeader</code> can’t be parsed
///
/// returns:
/// Initiated <code>Payment</code> object.
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol ADYPaymentServiceDelegate;
@class ADYTransactionPresentationMode;
@class ADYReversalRequest;

SWIFT_CLASS("_TtC6ADYPOS17ADYPaymentService") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYPaymentService : NSObject
@property (nonatomic, readonly, strong) id <ADYDeviceManager, ADYFirmwareManager> _Nonnull deviceManager;
/// Initialises the <code>ADYPaymentService</code> instance with a given <code>delegate</code>.
/// \param delegate the delegate handles the SDK onboarding.
///
- (nonnull instancetype)initWithDelegate:(id <ADYPaymentServiceDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
/// The unique identifier of this installation.
/// This uniquely identifies the host app installation.
/// It will be re-generated in following cases:
/// <ul>
///   <li>
///     the app is uninstalled.
///   </li>
/// </ul>
- (NSString * _Nullable)getInstallationIdAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// The AdyenPOS SDK version. This value is semantically versioned, and represented as a String e.g. “1.2.3”
- (NSString * _Nonnull)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of <code>ADYPaymentInterface</code> via which the transaction will be performed
/// \param type the type of the payment method
///
/// \param completion A completion handler that will be called with the requrested payment interface or an error.
///
- (void)getPaymentInterfaceWith:(enum ADYPaymentInterfaceType)type completion:(void (^ _Nonnull)(ADYPaymentInterface * _Nullable, NSError * _Nullable))completion;
/// Performs a transaction on a given interface.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     transaction: An instance of <code>ADYPaymentRequest</code> created with Terminal API request.
///   </li>
///   <li>
///     presentationMode: The mode for handling transaction flow UI events.
///   </li>
///   <li>
///     paymentInterface: An instance of <code>ADYPaymentInterface</code> for executing the transaction.
///   </li>
///   <li>
///     completion: A completion handler that will be called once the transaction is completed.
///   </li>
/// </ul>
- (void)performTransactionWith:(ADYPaymentRequest * _Nonnull)transaction paymentInterface:(ADYPaymentInterface * _Nonnull)paymentInterface presentationMode:(ADYTransactionPresentationMode * _Nonnull)presentationMode completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// Performs a transaction on a given interface.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: An instance of <code>ADYCardAcquisitionRequest</code> created with Terminal API request.
///   </li>
///   <li>
///     presentationMode: The mode for handling transaction flow UI events.
///   </li>
///   <li>
///     paymentInterface: An instance of <code>ADYPaymentInterface</code> for executing the transaction.
///   </li>
/// </ul>
/// The result of the transaction, including any errors that may have occurred, is returned as a Terminal API response
///
/// returns:
/// An instance of <code>ADYCardAcquisitionResponse</code> containing Terminal API data.
- (void)performCardAcquisitionWith:(ADYCardAcquisitionRequest * _Nonnull)request paymentInterface:(ADYPaymentInterface * _Nonnull)paymentInterface presentationMode:(ADYTransactionPresentationMode * _Nonnull)presentationMode completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// Performs a warm-up for the PaymentService.
/// This will:
/// <ul>
///   <li>
///     establish a new session if necessary.
///   </li>
///   <li>
///     fetch the configuration if it is expired.
///   </li>
///   <li>
///     prepare the Tap to Pay reader.
///   </li>
/// </ul>
/// \param completion A completion handler that will be called once the warmup is complete
///
- (void)warmUpWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Performs a reversal on a given transaction.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: An instance of <code>ADYReversalRequest</code> created with Terminal API request.
///   </li>
///   <li>
///     completion: A completion handler that will be called once the reversal is completed.
///     The result of the transaction, including any errors that may have occurred, is returned as a Terminal API response
///   </li>
/// </ul>
- (void)performReversalWith:(ADYReversalRequest * _Nonnull)request completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// Performs a diagnosis of the system.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: An instance of <code>ADYDiagnosisRequest</code> created with Terminal API request.
///   </li>
///   <li>
///     completion: A completion handler that will be called once the diagnosis is completed.
///     The result of the diagnosis, including any errors that may have occurred, is returned as a Terminal API response
///   </li>
/// </ul>
- (void)performDiagnosisWith:(ADYDiagnosisRequest * _Nonnull)request completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// Resets the session token
/// \param completion A completion handler that will be called once the session is reset
///
- (void)resetSessionWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6ADYPOS25ADYPaymentServiceDelegate_") SWIFT_AVAILABILITY(ios,introduced=17.0)
@protocol ADYPaymentServiceDelegate
/// Invoked when SDK needs to be onboarded.
/// \param setupToken Token to be passed to <code>/sessions</code>. Read more about <a href="doc:Integration">doc:Integration</a>.
///
/// \param completion A completion handler to be invoked once the <code>sdkData</code> is retrieved.
///
- (void)registerWith:(NSString * _Nonnull)setupToken completion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
@end


SWIFT_CLASS("_TtC6ADYPOS27ADYPaymentServiceParameters") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYPaymentServiceParameters : NSObject
- (nullable instancetype)initWithSuccessScreenTimeout:(NSTimeInterval)successScreenTimeout error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Describes the reversal transaction
SWIFT_CLASS("_TtC6ADYPOS18ADYReversalRequest") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYReversalRequest : NSObject
/// Terminal API reversal request data
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Initiates reversal transaction object with Terminal API reversal request data.
/// \param data Terminal API reversal request data.
///
///
/// throws:
///
///
/// returns:
/// Initiated <code>ADYReversalRequest</code> object.
- (nullable instancetype)initWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6ADYPOS30ADYTransactionPresentationMode") SWIFT_AVAILABILITY(ios,introduced=17.0)
@interface ADYTransactionPresentationMode : NSObject
/// The UI is handled by the SDK, presented on top of the provided <code>UIViewController</code>
/// \param presentingViewController The merchant application’s ViewController on top of which the SDK will present the transaction flow
///
/// \param parameters Set of configurable parameters allowing customisation of the behaviour of the AdyenPOS SDK
///
///
/// returns:
/// <code>ADYTransactionPresentationMode</code>
+ (ADYTransactionPresentationMode * _Nullable)presentingViewController:(UIViewController * _Nonnull)presentingViewController parameters:(ADYPaymentServiceParameters * _Nullable)parameters error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// The UI is handled by the SDK, presented on top of the provided <code>UIViewController</code>
/// \param presentingViewController The merchant application’s ViewController on top of which the SDK will present the transaction flow
///
///
/// returns:
/// <code>ADYTransactionPresentationMode</code>
+ (ADYTransactionPresentationMode * _Nullable)presentingViewController:(UIViewController * _Nonnull)presentingViewController error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// The UI is handled by the SDK embedded in a <code>View</code> as a <code>ViewModifier</code>
///
/// returns:
/// <code>ADYTransactionPresentationMode</code>
+ (ADYTransactionPresentationMode * _Nonnull)viewModifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
